import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,o as e,d as r}from"./app-BhKC0Yx3.js";const a="/studynote/assets/%E6%B5%81%E7%A8%8B-D_57IHl0.svg",n="/studynote/assets/image-20240805144118961-BJD745PI.png",s="/studynote/assets/image-20240805145154104-B6FEe8l4.png",p="/studynote/assets/image-20240805150423807-BQ2-s4TF.png",i="/studynote/assets/image-20240805151604928-BiiDMOTP.png",c="/studynote/assets/image-20240805150706678-BM6ymN2g.png",g="/studynote/assets/image-20240805151819628-zF8t8Qry.png",A="/studynote/assets/image-20240805151954236-B12FAg1x.png",m={},l=r('<h1 id="springboot的aop代理生成流程" tabindex="-1"><a class="header-anchor" href="#springboot的aop代理生成流程"><span>SpringBoot的AOP代理生成流程</span></a></h1><p>主要通过AnnotationAwareAspectJAutoProxyCreator类后置处理器，在bean生命周期的初始化阶段，后置处理器处理时生成AOP代理</p><p><img src="'+a+'" alt="流程" loading="lazy"></p><p>@EnableAspectJAutoProxy注解中通过@Import导入<strong>AspectJAutoProxyRegistrar</strong>类</p><p><img src="'+n+'" alt="image-20240805144118961" loading="lazy"></p><p>在AspectJAutoProxyRegistrar类中注册<strong>AnnotationAwareAspectJAutoProxyCreator</strong>后置处理器</p><p><img src="'+s+'" alt="image-20240805145154104" loading="lazy"></p><p>在Bean的初始化阶段会根据各后置处理器进行处理，其中通过AnnotationAwareAspectJAutoProxyCreator 调用 postProcessBeforeInitialization()方法获取AOP代理对象</p><p>AbstractAutowireCapableBeanFactory类中的方法：</p><p><img src="'+p+'" alt="image-20240805150423807" loading="lazy"></p><p>AnnotationAwareAspectJAutoProxyCreator 并没有实现postProcessBeforeInitialization()，实则调用的<strong>AbstractAutoProxyCreator</strong>类的方法</p><p><img src="'+i+'" alt="image-20240805151604928" loading="lazy"></p><p><img src="'+c+'" alt="image-20240805150706678" loading="lazy"></p><p>wrapIfNecessary()方法中的createProxy()方法，就是使用ProxyFactory创建的AOP代理对象</p><p><img src="'+g+'" alt="image-20240805151819628" loading="lazy"></p><p><img src="'+A+'" alt="image-20240805151954236" loading="lazy"></p>',16),y=[l];function d(u,P){return e(),o("div",null,y)}const x=t(m,[["render",d],["__file","springbootaop代理生成流程.html.vue"]]),h=JSON.parse('{"path":"/spring/springboot/springbootaop%E4%BB%A3%E7%90%86%E7%94%9F%E6%88%90%E6%B5%81%E7%A8%8B.html","title":"SpringBoot的AOP代理生成流程","lang":"zh-CN","frontmatter":{"description":"SpringBoot的AOP代理生成流程 主要通过AnnotationAwareAspectJAutoProxyCreator类后置处理器，在bean生命周期的初始化阶段，后置处理器处理时生成AOP代理 流程 @EnableAspectJAutoProxy注解中通过@Import导入AspectJAutoProxyRegistrar类 image-20...","head":[["meta",{"property":"og:url","content":"https://glory-study-review.github.io/studynote/studynote/spring/springboot/springbootaop%E4%BB%A3%E7%90%86%E7%94%9F%E6%88%90%E6%B5%81%E7%A8%8B.html"}],["meta",{"property":"og:site_name","content":"Glory学习笔记"}],["meta",{"property":"og:title","content":"SpringBoot的AOP代理生成流程"}],["meta",{"property":"og:description","content":"SpringBoot的AOP代理生成流程 主要通过AnnotationAwareAspectJAutoProxyCreator类后置处理器，在bean生命周期的初始化阶段，后置处理器处理时生成AOP代理 流程 @EnableAspectJAutoProxy注解中通过@Import导入AspectJAutoProxyRegistrar类 image-20..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-06T06:22:44.000Z"}],["meta",{"property":"article:author","content":"Glory"}],["meta",{"property":"article:modified_time","content":"2024-08-06T06:22:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SpringBoot的AOP代理生成流程\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-08-06T06:22:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Glory\\"}]}"]]},"headers":[],"git":{"createdTime":1722925364000,"updatedTime":1722925364000,"contributors":[{"name":"Glory","email":"214521739@qq.com","commits":1}]},"readingTime":{"minutes":0.61,"words":184},"filePathRelative":"spring/springboot/springbootaop代理生成流程.md","localizedDate":"2024年8月6日","autoDesc":true,"excerpt":"\\n<p>主要通过AnnotationAwareAspectJAutoProxyCreator类后置处理器，在bean生命周期的初始化阶段，后置处理器处理时生成AOP代理</p>\\n<p></p>\\n<p>@EnableAspectJAutoProxy注解中通过@Import导入<strong>AspectJAutoProxyRegistrar</strong>类</p>\\n<p></p>\\n<p>在AspectJAutoProxyRegistrar类中注册<strong>AnnotationAwareAspectJAutoProxyCreator</strong>后置处理器</p>\\n<p></p>\\n<p>在Bean的初始化阶段会根据各后置处理器进行处理，其中通过AnnotationAwareAspectJAutoProxyCreator 调用 postProcessBeforeInitialization()方法获取AOP代理对象</p>"}');export{x as comp,h as data};
