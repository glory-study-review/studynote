import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,d as t}from"./app-BhKC0Yx3.js";const p="/studynote/assets/image-20240418131646439-C4Yok89f.png",e="/studynote/assets/image-20240418135649270-BuJLeYq_.png",o="/studynote/assets/image-20240418135922261-CFsARQf6.png",c="/studynote/assets/image-20240418141241175-BIJLzXGO.png",i="/studynote/assets/image-20240418143924879-BqA7onUY.png",l="/studynote/assets/image-20240418145111006-D0hq5TM5.png",u="/studynote/assets/image-20240418150902836-Chg7X7VX.png",r="/studynote/assets/image-20240418150252044-DHx3BjWk.png",k="/studynote/assets/image-20240418151242985-BJC804Uj.png",d="/studynote/assets/image-20240418151729611-DoA2CK03.png",m="/studynote/assets/image-20240418152341645-BxB_gLMU.png",g="/studynote/assets/image-20240418152602637-BF3NCkpl.png",v="/studynote/assets/image-20240418161342349-zPbhEUX2.png",y="/studynote/assets/image-20240418162107965-ByBzLlk8.png",b="/studynote/assets/image-20240418164922781-w4rWtPzO.png",h="/studynote/assets/image-20240418164949537-Bnpra6bB.png",_="/studynote/assets/image-20240418165013492-DU3G9SBu.png",f="/studynote/assets/image-20240418165106392-Ck-yiTnT.png",T="/studynote/assets/image-20240418165136584-C1flzLn2.png",S="/studynote/assets/image-20240419112512894-CxmlD8li.png",z="/studynote/assets/image-20240419113317485-X9b-OuiN.png",w="/studynote/assets/image-20240419113547287-BFbsKhG8.png",x="/studynote/assets/image-20240419134726875-yZmhbyWp.png",B="/studynote/assets/image-20240419135155738--eJcLo66.png",E="/studynote/assets/image-20240419135433293-i8f-WRXd.png",M="/studynote/assets/image-20240419135448539-C3bpBklM.png",q="/studynote/assets/image-20240419135623745-3xcOoovp.png",C="/studynote/assets/image-20240419140431720-BHMIH9Mb.png",A="/studynote/assets/image-20240419140646786-iwJzEwVn.png",D="/studynote/assets/image-20240419141202858-R9MIgtWZ.png",N="/studynote/assets/image-20240419143313419-C02pMj2k.png",O="/studynote/assets/image-20240419153939135-jGvrIxCP.png",R="/studynote/assets/image-20240419154036754-D4lFOfOx.png",P={},U=t(`<h1 id="spring声明式事务" tabindex="-1"><a class="header-anchor" href="#spring声明式事务"><span>Spring声明式事务</span></a></h1><h2 id="五种失效情况" tabindex="-1"><a class="header-anchor" href="#五种失效情况"><span>五种失效情况</span></a></h2><ol><li><p>类没有被 Spring 管理</p></li><li><p>方法不是public修饰</p></li><li><p>异常被捕获（事务默认只在抛出运行时异常）</p></li><li><p>同一个类中，方法内部调用</p><p>方法内部使用this.xxx()的方式调用事务存在事务的方法； 失效的本质是，this指的的是对象本身，而不是代理对象，事务是由AOP代理来实现的，处理事务的增强方法都是在代理对象的方法中，因此使用this对象本身调用方法AOP会失效。 为什么this指的是对象本身而不是代理对象呢，原因，代理对象执行方法时，增强方法在代理对象的方法中，而原对象方法还是使用原对象来调用的，由原对象调用的方法中使用this，指向的当然时原对象。 解决，不用this调用本类中的方法，从容器中获取bean再调用</p></li><li><p>MySQL存储引警不支持事务</p></li></ol><p>参考：<a href="https://blog.csdn.net/qq_52423918/article/details/130806813" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/qq_52423918/article/details/130806813</a></p><h2 id="传播行为" tabindex="-1"><a class="header-anchor" href="#传播行为"><span>传播行为</span></a></h2><p>事务协调员（内部方法）对事务管理员（外部方法）是否携带事务而进行的处理态度</p><p>1.<strong><code>REQUIRED</code></strong></p><p>当外部方法存在事务时，内部方法事务将加入外部事务，内部事务产生回滚时，外部事务也回滚 当外部方法不存在事务时，内部方法事务就创建自己的事务</p><p>2.<strong><code>REQUIRES_NEW</code></strong></p><p>当外部方法存在事务时，内部方法创建自己独立的事务，不受外部事务影响 当外部方法不存在事务时，内部方法创建自己独立的事务</p><p>3.<strong><code>NESTED</code></strong></p><p>当外部方法存在事务时，内部方法事务成为外部事务的嵌套子事务，当内部事务回滚时只会回滚到内部事务执行前状态 当外部方法不存在事务时，内部方法创建自己独立的事务执行</p><p>4.<strong><code>MANDATORY</code></strong></p><p>当外部方法存在事务，内部方法事务加入</p><p>当外部方法不存在事务时，抛出异常</p><p>5.<strong><code>SUPPORTS</code></strong></p><p>当外部方法存在事务，内部方法事务加入 当外部方法不存在事务时，内部方法就不使用事务</p><p>6.<strong><code>NOT_SUPPORTED</code></strong></p><p>不管外部方法是否有事务，内部方法的事务都不生效，执行到内部方法时，外部事务挂起等待内部方法执行</p><p>7.<strong><code>NEVER</code></strong></p><p>总是非事务地执行，如果外部方法存在事务，则抛出异常。</p><h2 id="spring事务源码分析" tabindex="-1"><a class="header-anchor" href="#spring事务源码分析"><span>Spring事务源码分析</span></a></h2><p>spring使用AOP实现声明式事务，其中涉及到许多配置和属性读取，如事务管理器、事务传播行为等待；</p><p>源码分析之前，需要明确Spring事务帮我们做了什么：</p><ul><li>从数据池中获取数据库连接</li><li>开启事务并设置手动提交</li><li>调用原方法</li><li>提交/回滚 事务</li></ul><p>此处暂时研究spring事务的创建、提交、回滚相关执行流程</p><p>案例</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Transactional</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Dept</span> dept <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dept<span class="token punctuation">.</span><span class="token function">setDeptName</span><span class="token punctuation">(</span><span class="token string">&quot;测试事务3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        deptService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>dept<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">B</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        b<span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Transactional</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        user<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span><span class="token string">&quot;测试事务&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		user<span class="token punctuation">.</span><span class="token function">setNickName</span><span class="token punctuation">(</span><span class="token string">&quot;测试事务&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		user<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">&quot;测试事务&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		userService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>👇当执行 a()方法时，AOP代理中会调用TransactionInterceptor类中的invoke方法，核心在其父类的invokeWithinTransaction方法中，包含了整个事务处理的过程</p><p><img src="`+p+'" alt="" loading="lazy"></p><p><img src="'+e+'" alt="" loading="lazy"></p><p><img src="'+o+'" alt="" loading="lazy"></p><p>👇来看一下事务开启做了什么，createTransactionIfNecessary</p><p><img src="'+c+'" alt="" loading="lazy"></p><p>开启事务的具体处理由事务管理器的抽象类(AbstractPlatformTransactionManager)定义，使用getTransaction模板方法，传入事务属性</p><p><img src="'+i+'" alt="" loading="lazy"></p><p>doGetTransaction 返回一个事务对象 由具体的事务管理器实现类实现 一般为DataSourceTransactionManager</p><p><img src="'+l+'" alt="" loading="lazy"></p><p>从事务同步管理器中获取数据库连接资源，该资源是通过ThreadLocal与线程绑定的，TransactionSynchronizationManager保存着当前线程事务中的事务资源和一些事务信息(如当前事务的名称、事务隔离级别等)，第一次执行时，TransactionSynchronizationManager中并不存在资源，ConnectionHolder为null</p><p>创建一个事务对象存放当前事务的数据连接持有对象 和 是否为新持有对象的标识，后续通过该数据持有对象获取连接。</p><p>回到<code>getTransaction</code>继续执行，<code>isExistingTransaction</code>判断当前是否已存在事务，分支内是对于子事务如何处理的入口</p><p>DataSourceTransactionManager 的 isExistingTransaction</p><p><img src="'+u+'" alt="" loading="lazy"></p><p><img src="'+r+'" alt="" loading="lazy"></p><p>通过查看事务对象是否存在数据连接持有对象 数据连接是否存在活动事务标志，来判断是否已存在事务；声明式事务方法第一次执行时，条件显然不成立；</p><p>继续执行</p><p><img src="'+k+'" alt="" loading="lazy"></p><p>通过对事务属性中的事务传播行为判断，三个常用的传播行为，调用startTransaction 开启事务</p><p><img src="'+d+'" alt="" loading="lazy"></p><p>该方法会创建一个事务状态对象，保存着当前事务的属性，事务对象，是否为新事物等等信息，用于后续事务处理的；</p><p>继续执行到 的 <code>doBegin</code>，由事务管理器实现类实现</p><p>此处是DataSourceTransactionManager的实现</p><p><img src="'+m+'" alt="" loading="lazy"></p><p><img src="'+g+'" alt="" loading="lazy"></p><p>会从数据池中获取连接，并将连接持有对象存入到事务对象中，设置新持有对象状态为true，然后将连接设为事务手动提交；连接持有对象活动事务标志设上，保证前面判断已存在事务的正确性；由于是新持有对象，可执行TransactionSynchronizationManager的绑定操作，这就保证了，子事务在开启的过程中doGetTransaction()方法中能够获取同一持有对象。</p><p>回到startTransaction，继续执行prepareSynchronization方法，将当前事务的状态(如：当前事务开启状态、激活状态、隔离级别)、初始化事务同步回调内容，存放的是当前需要操作的事务信息。</p><p><img src="'+v+'" alt="" loading="lazy"></p><p>至此开启事务结束，返回事务状态对象，回到<code>invokeWithinTransaction</code>执行带代理的原方法</p><p><img src="'+y+'" alt="" loading="lazy"></p><p>如果当前方法中没有调用其他存在事务的方法，那么原方法调用完成后，直接回滚或者提交</p><p>先看看提交</p><p><img src="'+b+'" alt="" loading="lazy"></p><p><img src="'+h+'" alt="" loading="lazy"></p><p><img src="'+_+'" alt="" loading="lazy"></p><p><img src="'+f+'" alt="" loading="lazy"></p><p><img src="'+T+'" alt="" loading="lazy"></p><p>提交由事务管理器抽象类提供模板方法，其中triggerBeforeCommit(status)和triggerBeforeCompletion(status);方法是通过获取TransactionSynchronizationManager中配置的事务提交前执行方法，进行事务提交前的前置操作，用户可以根据情况在TransactionSynchronizationManager中注册事务前置和后置方法。</p><p>事务管理器的提交方法其实就是获取存储的事务连接对象，手动commit。</p><p><img src="'+S+'" alt="" loading="lazy"></p><p>可以看到，提交一定要是事务状态为新事务时，才能提交；</p><p>回到案例，当原方法执行时，又执行了一个声明式事务方法b.b();</p><p>此时重新开始执行上面分析的事务开启方法，在isExistingTransaction处，因为第一个事务开启时将连接持有对象与线程绑定由TransactionSynchronizationManager管理，此处判断为true,执行另一创建事务状态对象的逻辑handleExistingTransaction</p><p><img src="'+z+'" alt="" loading="lazy"></p><p><img src="'+w+'" alt="" loading="lazy"></p><p>可以看到，当判断已存在事务时，会根据事务传播行为，来执行不同的逻辑，案例的子事务传播行为是默认的PROPAGATION_REQUIRED走最后一个创建事务状态过程，可以看到<code>newTransaction</code>，设置为了false</p><p>所以当子事务方法，执行到提交操作时，并不会走提交，父事务执行提交时才会真正提交。</p><p>来看看回滚</p><p><img src="'+x+'" alt="" loading="lazy"></p><p>原方法抛出异常时，进入处理（当原方法捕获了异常但是不抛出新异常，就会事务失效）</p><p><img src="'+B+'" alt="" loading="lazy"></p><p><img src="'+E+'" alt="" loading="lazy"></p><p><img src="'+M+'" alt="" loading="lazy"></p><p>会判断当前异常是否是定义的异常，如果注解没有定义回滚异常，就使用父类方法匹对(匹对异常RuntimeException或者Error)</p><p>匹对失败直接执行提交的操作，匹对成功执行回滚操作（<mark>此处就是为什么方法中抛出的异常与定义的回滚异常不一致时，事务失效的原因</mark>）</p><p><img src="'+q+'" alt="" loading="lazy"></p><p><img src="'+C+'" alt="" loading="lazy"></p><p>回滚中，对事务状态做了许多判断，在案例的情况下，子事务加入父事务没有开启新事物，status.isNewTransaction()为false,就进入分支执行doSetRollbackOnly，为事务的连接持有对象设置了一个回滚标记</p><p><img src="'+A+'" alt="" loading="lazy"></p><p><img src="'+D+'" alt="" loading="lazy"></p><p>所以如果加入父事务的子事务抛出了异常，此时不管父事务的原方法是捕获了异常，还是正常抛出，事务都会回滚</p><p>如果父事务真正抛出异常，那事务状态中isNewTransaction为true，直接回滚</p><p>如果父事务将子事务的异常捕获且没有抛出新异常，那父事务其实会正常进入提交的操作但是最后还是会回滚，那为什么异常被捕获事务没有失效，我们回看提交模板方法中</p><p>在processCommit前其实还有判断</p><p>defStatus.isGlobalRollbackOnly() 其实就是判断，当前连接持有对象中的回滚标记是否为true，子事务中将其置为true，因此，最后还是进行了回滚</p><p><img src="'+N+'" alt="" loading="lazy"></p><h2 id="多线程下事务的处理" tabindex="-1"><a class="header-anchor" href="#多线程下事务的处理"><span>多线程下事务的处理</span></a></h2><p>通过源码分析，spring处理事务的方式本质就是帮我们获取数据库连接，调用数据库连接的手动提交和回滚；而获取的数据库连接资源绑定在线程中由TransactionSynchronizationManager帮忙管理，事务其实就是同一连接中的数据库操作的一致性；多线程下spring声明式事务的失效原因是线程之间的数据隔离，也就是多线程下获取的数据库连接都不一致了，就谈不上事务了。</p><p>我们使用Mybatis时，mybatis在执行sql前会从TransactionSynchronizationManager中取获取数据库连接</p><p><img src="'+O+'" alt="" loading="lazy"></p><p><img src="'+R+`" alt="" loading="lazy"></p><p>所以可以在子线程调用开启事务的方法之前，将主线程中获取到的数据库连接资源绑定到子线程上，并将子线程的异常正常抛出，保证正常回滚</p><p>例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Transactional</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ConnectionHolder</span> resource <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ConnectionHolder</span><span class="token punctuation">)</span> <span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">.</span><span class="token function">getCurrentTransactionName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//子线程1</span>
    <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span> future1 <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">.</span><span class="token function">bindResource</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">,</span> resource<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Dept</span> dept <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dept<span class="token punctuation">.</span><span class="token function">setDeptName</span><span class="token punctuation">(</span><span class="token string">&quot;测试事务&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> deptService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>dept<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">whenComplete</span><span class="token punctuation">(</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> ex<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">.</span><span class="token function">unbindResource</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//子线程2</span>
    <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span> future2 <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">.</span><span class="token function">bindResource</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">,</span> resource<span class="token punctuation">)</span><span class="token punctuation">;</span>
        mutiplyThreadTranscationManager<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//开启默认事务传播行为</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">whenComplete</span><span class="token punctuation">(</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> ex<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">.</span><span class="token function">unbindResource</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">allOf</span><span class="token punctuation">(</span>future1<span class="token punctuation">,</span> future2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Supplier</span><span class="token punctuation">&gt;</span></span> tasks <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Dept</span> dept1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    dept1<span class="token punctuation">.</span><span class="token function">setDeptName</span><span class="token punctuation">(</span><span class="token string">&quot;测试事务3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    deptService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>dept1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//MutiplyThreadTranscationManager</span>
<span class="token annotation punctuation">@Transactional</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    user<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span><span class="token string">&quot;测试事务&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    user<span class="token punctuation">.</span><span class="token function">setNickName</span><span class="token punctuation">(</span><span class="token string">&quot;测试事务&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    user<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">&quot;测试事务&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    userService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,103),j=[U];function G(F,L){return a(),s("div",null,j)}const H=n(P,[["render",G],["__file","spring声明式事务.html.vue"]]),J=JSON.parse('{"path":"/spring/spring-framework/spring%E5%A3%B0%E6%98%8E%E5%BC%8F%E4%BA%8B%E5%8A%A1.html","title":"Spring声明式事务","lang":"zh-CN","frontmatter":{"description":"Spring声明式事务 五种失效情况 类没有被 Spring 管理 方法不是public修饰 异常被捕获（事务默认只在抛出运行时异常） 同一个类中，方法内部调用 方法内部使用this.xxx()的方式调用事务存在事务的方法； 失效的本质是，this指的的是对象本身，而不是代理对象，事务是由AOP代理来实现的，处理事务的增强方法都是在代理对象的方法中，因...","head":[["meta",{"property":"og:url","content":"https://glory-study-review.github.io/studynote/studynote/spring/spring-framework/spring%E5%A3%B0%E6%98%8E%E5%BC%8F%E4%BA%8B%E5%8A%A1.html"}],["meta",{"property":"og:site_name","content":"Glory学习笔记"}],["meta",{"property":"og:title","content":"Spring声明式事务"}],["meta",{"property":"og:description","content":"Spring声明式事务 五种失效情况 类没有被 Spring 管理 方法不是public修饰 异常被捕获（事务默认只在抛出运行时异常） 同一个类中，方法内部调用 方法内部使用this.xxx()的方式调用事务存在事务的方法； 失效的本质是，this指的的是对象本身，而不是代理对象，事务是由AOP代理来实现的，处理事务的增强方法都是在代理对象的方法中，因..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-09T13:35:23.000Z"}],["meta",{"property":"article:author","content":"Glory"}],["meta",{"property":"article:modified_time","content":"2024-07-09T13:35:23.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring声明式事务\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-07-09T13:35:23.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Glory\\"}]}"]]},"headers":[{"level":2,"title":"五种失效情况","slug":"五种失效情况","link":"#五种失效情况","children":[]},{"level":2,"title":"传播行为","slug":"传播行为","link":"#传播行为","children":[]},{"level":2,"title":"Spring事务源码分析","slug":"spring事务源码分析","link":"#spring事务源码分析","children":[]},{"level":2,"title":"多线程下事务的处理","slug":"多线程下事务的处理","link":"#多线程下事务的处理","children":[]}],"git":{"createdTime":1715938956000,"updatedTime":1720532123000,"contributors":[{"name":"黄灰红","email":"214521739@qq.com","commits":3},{"name":"Glory","email":"214521739@qq.com","commits":2}]},"readingTime":{"minutes":9.06,"words":2719},"filePathRelative":"spring/spring-framework/spring声明式事务.md","localizedDate":"2024年5月17日","autoDesc":true,"excerpt":"\\n<h2>五种失效情况</h2>\\n<ol>\\n<li>\\n<p>类没有被 Spring 管理</p>\\n</li>\\n<li>\\n<p>方法不是public修饰</p>\\n</li>\\n<li>\\n<p>异常被捕获（事务默认只在抛出运行时异常）</p>\\n</li>\\n<li>\\n<p>同一个类中，方法内部调用</p>\\n<p>方法内部使用this.xxx()的方式调用事务存在事务的方法；\\n失效的本质是，this指的的是对象本身，而不是代理对象，事务是由AOP代理来实现的，处理事务的增强方法都是在代理对象的方法中，因此使用this对象本身调用方法AOP会失效。\\n为什么this指的是对象本身而不是代理对象呢，原因，代理对象执行方法时，增强方法在代理对象的方法中，而原对象方法还是使用原对象来调用的，由原对象调用的方法中使用this，指向的当然时原对象。\\n解决，不用this调用本类中的方法，从容器中获取bean再调用</p>\\n</li>\\n<li>\\n<p>MySQL存储引警不支持事务</p>\\n</li>\\n</ol>"}');export{H as comp,J as data};
