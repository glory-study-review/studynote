import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,d as e}from"./app-BhKC0Yx3.js";const t="/studynote/assets/image-20240613143516100-Du5adxIm.png",p="/studynote/assets/image-20240614101243220-CX1sxWdr.png",o="/studynote/assets/image-20240614102902278-DyTDNe-m.png",c="/studynote/assets/image-20240614131724579-BgxAElQh.png",l="/studynote/assets/image-20240614134543575-8oHTBWcp.png",i="/studynote/assets/image-20240614135030288-BqfCQwd4.png",u="/studynote/assets/image-20240614122131585-D3PFofbe.png",r="/studynote/assets/image-20240614141331957-4WBpIHCt.png",k="/studynote/assets/image-20240614141552352-s_qRSuNI.png",d="/studynote/assets/image-20240614151754156-2ZF7fXQy.png",m="/studynote/assets/image-20240614142237015-BQXDohZB.png",v="/studynote/assets/image-20240614150752746-CXWqQO9i.png",b="/studynote/assets/image-20240614151647134-BHWue_Rq.png",g="/studynote/assets/image-20240614152702798-BnQFUGEO.png",y="/studynote/assets/image-20240614153457574-CQPnOoXm.png",f="/studynote/assets/image-20240614152312014-Dr3xOfjy.png",w="/studynote/assets/image-20240612161733108-OG7Mdqkl.png",h="/studynote/assets/image-20240612170943036-sZNA2MMj.png",B={},S=e(`<h1 id="循环依赖" tabindex="-1"><a class="header-anchor" href="#循环依赖"><span>循环依赖</span></a></h1><p>类A依赖类B，类B也依赖类A，这种情况就会出现循环依赖。 Bean A → Bean B → Bean A</p><p>循环依赖会导致<code>内存溢出</code></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AService</span> <span class="token punctuation">{</span>
<span class="token keyword">private</span> <span class="token class-name">BService</span> bService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BService</span> <span class="token punctuation">{</span>
<span class="token keyword">private</span> <span class="token class-name">AService</span> aService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当通过 new AService() 创建一个对象时你会获得一个栈溢出的错误 因为调用 new AService() 时会先去执行属性 bService 的初始化, 而 bService 的初始化又会去执行AService 的初始化， 这样就形成了一个循环调用，最终导致调用栈内存溢出。</p><blockquote><p>注意：从springboot2.6.0开始，默认关闭循环依赖，如果需要开启，添加配置<code>spring.main.allow-circular-references=true</code></p><p><img src="`+t+`" alt="image-20240613143516100" loading="lazy"></p></blockquote><h2 id="解决循环依赖的简单思路" tabindex="-1"><a class="header-anchor" href="#解决循环依赖的简单思路"><span>解决循环依赖的简单思路</span></a></h2><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 模拟spring解决循环依赖的缓存 key存类名 value存bean实例，防止循环依赖后不断创建新对象导致栈内存溢出</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> cacheMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InvocationTargetException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchMethodException</span><span class="token punctuation">,</span> <span class="token class-name">InstantiationException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span> <span class="token punctuation">{</span>
    <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> classes <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">Dept</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Stuff</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Class</span> classA <span class="token operator">:</span> classes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//获取bean</span>
        <span class="token function">getBean</span><span class="token punctuation">(</span>classA<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">Stuff</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDept</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">Dept</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">Dept</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getStuff</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">Stuff</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> bean<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchMethodException</span><span class="token punctuation">,</span> <span class="token class-name">InvocationTargetException</span><span class="token punctuation">,</span> <span class="token class-name">InstantiationException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span> <span class="token punctuation">{</span>
    <span class="token comment">// 获取要创建的bean的类名</span>
    <span class="token class-name">String</span> beanName <span class="token operator">=</span> bean<span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 判断缓存map的key里面是否有该类名</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>cacheMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//存在直接返回实例bean</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> cacheMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//不存在类名，使用反射得到实例化的bean  obj</span>
    <span class="token class-name">Object</span> obj <span class="token operator">=</span> bean<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//将实例化的bean和类名存入缓存map中</span>
    cacheMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//获取bean里面的属性</span>
    <span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token comment">//设置的是bean里面的属性</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Field</span> field <span class="token operator">:</span> fields<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> fieldType <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//属性的类名</span>
        <span class="token class-name">String</span> fieldName <span class="token operator">=</span> fieldType<span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 第一参数是表示【这个field是属于哪个对象的】，第二个参数放set的值</span>
        <span class="token comment">//这里第二个查询在缓存map里查找是否有该属性类名的bean，存在直接取出来set进去，不存在递归调用getBean()创建该类的bean</span>
        field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> cacheMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>fieldName<span class="token punctuation">)</span><span class="token operator">?</span>cacheMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>fieldName<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">getBean</span><span class="token punctuation">(</span>fieldType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//最后返回bean</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> obj<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="spring是如何解决循环依赖的" tabindex="-1"><a class="header-anchor" href="#spring是如何解决循环依赖的"><span>spring是如何解决循环依赖的</span></a></h2><p>众所周知，spring使用三级缓存解决循环依赖问题</p><ol><li><code>singletonObjects</code>：用于存放完全初始化好的 bean，<strong>从该缓存中取出的 bean 可以直接使用</strong></li><li><code>earlySingletonObjects</code>：提前曝光的单例对象的cache，存放原始的 bean 对象（尚未填充属性），如果存在循环依赖 会通过第三级缓存生成早期引用存放在此。</li><li><code>singletonFactories</code>：存放单例对象工厂对象，用于生成早期引用。</li></ol><p>获取缓存bean的实现在<code>DefaultSingletonBeanRegistry</code>类的方法<a id="getSingleton1()"><code>getSingleton()</code></a>中</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token class-name">Object</span> <span class="token function">getSingleton</span><span class="token punctuation">(</span><span class="token class-name">String</span> beanName<span class="token punctuation">,</span> <span class="token keyword">boolean</span> allowEarlyReference<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment">// Quick check for existing instance without full singleton lock</span>
    <span class="token comment">//先从第一个Map中获取成品Bean</span>
   <span class="token class-name">Object</span> singletonObject <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>singletonObjects<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span>singletonObject <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isSingletonCurrentlyInCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">//第一个Map中没有，从第二个Map中获取半成品Map</span>
      singletonObject <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>earlySingletonObjects<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>singletonObject <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> allowEarlyReference<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">//如果半成品也没有，那就需要从第三个Map中获取工厂对象来获取半成品Bean</span>
          <span class="token comment">//加锁保证单例性</span>
         <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>singletonObjects<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// Consistent creation of early reference within full singleton lock</span>
            singletonObject <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>singletonObjects<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>singletonObject <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
               singletonObject <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>earlySingletonObjects<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
               <span class="token keyword">if</span> <span class="token punctuation">(</span>singletonObject <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                  <span class="token class-name">ObjectFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> singletonFactory <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>singletonFactories<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
                  <span class="token keyword">if</span> <span class="token punctuation">(</span>singletonFactory <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                      <span class="token comment">//获取工厂对象，调用工厂对象的getObject方法，其中会判断该bean是否需要创建AOP</span>
                     singletonObject <span class="token operator">=</span> singletonFactory<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                      <span class="token comment">//创建好的对象，放进第二个Map</span>
                     <span class="token keyword">this</span><span class="token punctuation">.</span>earlySingletonObjects<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> singletonObject<span class="token punctuation">)</span><span class="token punctuation">;</span>
                     <span class="token comment">//从第三个Map中删除对应工厂对象，保证单例性</span>
                     <span class="token keyword">this</span><span class="token punctuation">.</span>singletonFactories<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
                  <span class="token punctuation">}</span>
               <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
         <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>
   <span class="token keyword">return</span> singletonObject<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该方法还有个重载方法，在本文中将上面的<code>getSingleton()</code>称为<code>getSingleton1()</code>，将下面的方法称为<a id="getSingleton2()"><code>getSingleton2()</code></a></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getSingleton</span><span class="token punctuation">(</span><span class="token class-name">String</span> beanName<span class="token punctuation">,</span> <span class="token class-name">ObjectFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> singletonFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> <span class="token string">&quot;Bean name must not be null&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>singletonObjects<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Object</span> singletonObject <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>singletonObjects<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>singletonObject <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>singletonsCurrentlyInDestruction<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationNotAllowedException</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span><span class="token string">&quot;Singleton bean creation not allowed while singletons of this factory are in destruction &quot;</span> <span class="token operator">+</span><span class="token string">&quot;(Do not request a bean from a BeanFactory in a destroy method implementation!)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;Creating shared instance of singleton bean &#39;&quot;</span> <span class="token operator">+</span> beanName <span class="token operator">+</span> <span class="token string">&quot;&#39;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token function">beforeSingletonCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">boolean</span> newSingleton <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token keyword">boolean</span> recordSuppressedExceptions <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>suppressedExceptions <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>recordSuppressedExceptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>suppressedExceptions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                singletonObject <span class="token operator">=</span> singletonFactory<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                newSingleton <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalStateException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// Has the singleton object implicitly appeared in the meantime -&gt;</span>
                <span class="token comment">// if yes, proceed with it since the exception indicates that state.</span>
                singletonObject <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>singletonObjects<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>singletonObject <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeanCreationException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>recordSuppressedExceptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> suppressedException <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>suppressedExceptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        ex<span class="token punctuation">.</span><span class="token function">addRelatedCause</span><span class="token punctuation">(</span>suppressedException<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">finally</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>recordSuppressedExceptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span>suppressedExceptions <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token function">afterSingletonCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>newSingleton<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">addSingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> singletonObject<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> singletonObject<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="dogetbean" tabindex="-1"><a class="header-anchor" href="#dogetbean"><span>doGetBean()</span></a></h3><p>假设A与B循环依赖，从注册A的bean开始；</p><p><code>AbstractBeanFactory</code>的getBean()为入口，调用doGetBean()</p><p>doGetBean一开始就使用getSingleton()，追进去查看，发现使用的是<a href="#getSingleton1()">getSingleton1()</a></p><p>第二个参数为true，即如果第二层缓存不存在，会查看第三层缓存；</p><p><img src="`+p+'" alt="image-20240614101243220" loading="lazy"></p><p><img src="'+o+'" alt="image-20240614102902278" loading="lazy"></p><p>此时A是初次创建，三层缓存中并不存在任何相关对象，返回null</p><p>不进入该判断分支，进入else</p><p><img src="'+c+'" alt="image-20240614131724579" loading="lazy"></p><p><img src="'+l+'" alt="image-20240614134543575" loading="lazy"></p><p>其中的dependsOn依赖处理，并不是指属性依赖注入的依赖初始化</p><p>而是处理使用xml定义bean时定义的depends-on，或者@DependsOn注解的依赖；</p><p>dependsOn可以指定bean的创建和销毁顺序，所以需要先保证dependsOn依赖的bean先初始化；此处产生的循环依赖无法解决，会抛出异常；</p><p><img src="'+i+'" alt="image-20240614135030288" loading="lazy"></p><p>我们来看一下创建bean部分，使用了<a href="#getSingleton2()">getSingleton2()</a>,lambda传入第二个工厂的getObject()实现方法</p><p><img src="'+u+'" alt="image-20240614122131585" loading="lazy"></p><p>具体查看一下，执行了哪些操作</p><p><img src="'+r+'" alt="image-20240614141331957" loading="lazy"></p><p>这个创建前校验，往<code>singletonsCurrentlyInCreation</code>中添加了当前beanName，此处也是循环依赖检测的一个关键点。</p><p><img src="'+k+'" alt="image-20240614141552352" loading="lazy"></p><p><img src="'+d+'" alt="image-20240614151754156" loading="lazy"></p><p>接下去执行lambda内容<code>createBean()</code>，根据BeanDefinition执行实例化前处理器的相关处理，然后进入<code>doCreateBean()</code></p><p><img src="'+m+`" alt="image-20240614142237015" loading="lazy"></p><h3 id="docreatebean" tabindex="-1"><a class="header-anchor" href="#docreatebean"><span>doCreateBean()</span></a></h3><p><code>AbstractAutowireCapableBeanFactory</code>类中的<code>doCreateBean</code>方法，创建bean的具体实现。</p><p>该方法主要三大部分：</p><p>Bean的实例化</p><p>Bean属性填充</p><p>Bean的初始化</p><ul><li><p>实例化</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// Instantiate the bean.</span>
<span class="token class-name">BeanWrapper</span> instanceWrapper <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    instanceWrapper <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>factoryBeanInstanceCache<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>instanceWrapper <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    instanceWrapper <span class="token operator">=</span> <span class="token function">createBeanInstance</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name">Object</span> bean <span class="token operator">=</span> instanceWrapper<span class="token punctuation">.</span><span class="token function">getWrappedInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> beanType <span class="token operator">=</span> instanceWrapper<span class="token punctuation">.</span><span class="token function">getWrappedClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>beanType <span class="token operator">!=</span> <span class="token class-name">NullBean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    mbd<span class="token punctuation">.</span>resolvedTargetType <span class="token operator">=</span> beanType<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实例化没有深入研究，最终创建了一个Bean的原始对象，还没有对其中的属性进行填充</p><p>实例化后处理循环依赖的关键点：如果当前bean为单例，处于创建中，并且开启了循环依赖的配置，那么<code>earlySingletonExposure</code>为true，就调用<code>addSingletonFactory</code>，将工厂对象存进第三级缓存</p><p>springboot 2.6.0后加入的循环依赖的配置，默认关闭，配置在此处影响了三级缓存</p><p><code>getEarlyBeanReference()</code>：生成二级缓存中早期引用的方法，如果bean存在实现了<code>SmartInstantiationAwareBeanPostProcessor</code>类的后置处理器，就通过后置处理器的getEarlyBeanReference()方法得到代理后的引用，不然就返回原始引用。(这就是@Async的循环依赖无法解决的关键)；</p><p>this.earlyProxyReferences.put(cacheKey, bean);该语句使得初始化时相同后置处理器不会再次生成产生代理对象。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// Eagerly cache singletons to be able to resolve circular references</span>
<span class="token comment">// even when triggered by lifecycle interfaces like BeanFactoryAware.</span>
<span class="token keyword">boolean</span> earlySingletonExposure <span class="token operator">=</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>allowCircularReferences <span class="token operator">&amp;&amp;</span>
      <span class="token function">isSingletonCurrentlyInCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>earlySingletonExposure<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">&quot;Eagerly caching bean &#39;&quot;</span> <span class="token operator">+</span> beanName <span class="token operator">+</span>
            <span class="token string">&quot;&#39; to allow for resolving potential circular references&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
    <span class="token comment">//往第三个Map中存入beanName对应的一个ObjectFactory，该工厂对象通过lambda传入一个方法</span>
    <span class="token comment">//该方法就是用于在循环依赖发生后，创建AOP或者返回原始对象的方法</span>
   <span class="token function">addSingletonFactory</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token function">getEarlyBeanReference</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> bean<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//Obtain a reference for early access to the specified bean, typically for the purpose of resolving a circular reference.</span>
<span class="token keyword">protected</span> <span class="token class-name">Object</span> <span class="token function">getEarlyBeanReference</span><span class="token punctuation">(</span><span class="token class-name">String</span> beanName<span class="token punctuation">,</span> <span class="token class-name">RootBeanDefinition</span> mbd<span class="token punctuation">,</span> <span class="token class-name">Object</span> bean<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Object</span> exposedObject <span class="token operator">=</span> bean<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mbd<span class="token punctuation">.</span><span class="token function">isSynthetic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">hasInstantiationAwareBeanPostProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">SmartInstantiationAwareBeanPostProcessor</span> bp <span class="token operator">:</span> <span class="token function">getBeanPostProcessorCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>smartInstantiationAware<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            exposedObject <span class="token operator">=</span> 
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> exposedObject<span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token comment">//主要实现方法</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getEarlyBeanReference</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Object</span> cacheKey <span class="token operator">=</span> <span class="token function">getCacheKey</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>earlyProxyReferences<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">,</span> bean<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">wrapIfNecessary</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> cacheKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>属性填充</p><p>依赖注入就在这完成，如果循环依赖没有开启，该方法就会异常</p><p><code>populateBean</code>(beanName, mbd, instanceWrapper);</p><p>根据调试查看调用链</p><p>applyPropertyValues() -&gt; resolveValueIfNecessary() -&gt; resolveReference() -&gt; getBean()</p><p>获取bean的需要注入的属性，最终又是调用getBean()去获取需要属性注入的B对象</p><p>初次获取B对象，和上面流程一样，又进入属性填充，发现需要注入A对象，又调用getBean()获取A对象，循环就开始，来看一下第二次获取A有什么不同</p><p>根据<a href="#getSingleton1()">getSingleton1()</a>此时能够从三级缓存中获取工厂对象，从而获取早期引用对象，就进入if分组，最后注入B对象中属性中，B对象注入A对象属性中</p><p><img src="`+v+'" alt="image-20240614150752746" loading="lazy"></p><p>如果没有打开循环依赖配置，此处依旧获取null，和初次创建A对象一样就会走else分支，执行<a href="#getSingleton2()">getSingleton2()</a>，再执行其中的<code>beforeSingletonCreation()</code>方法时，应为<code>singletonsCurrentlyInCreation</code>集合已经存在A对象的beanName而添加失败，抛出异常。</p><p><img src="'+b+'" alt="image-20240614151647134" loading="lazy"></p></li><li><p>初始化</p><p>属性填充成功后，会进行初始化，在<code>AbstractAutowireCapableBeanFactory</code>类中的<code>initializeBean(String beanName, Object bean,RootBeanDefinition mbd)</code>方法中</p><p>进行bean的后置处理器处理，如代理对象的创建</p><p><img src="'+g+'" alt="image-20240614152702798" loading="lazy"></p><p>但是此处不会生成获取早期引用方法(getEarlyBeanReference())得到的代理对象，因为相关后置处理器的后置处理方法中，会去获取缓存中是否已经有记录，this.earlyProxyReferences.remove(cacheKey)，不存在时才会创建代理对象，不然返回原始对象。</p><p><img src="'+y+'" alt="image-20240614153457574" loading="lazy"></p></li><li><p>校验</p><p><img src="'+f+'" alt="image-20240614152312014" loading="lazy"></p><p>初始化后，如果允许早期暴露单例(<code>earlySingletonExposure</code>为true)，并且能够从一二级缓存中获取早期引用(getSingleton(beanName, false)第二参数为false，只会从第二)，会比较初始化后的对象和原始对象引用是否一致，如果一致，最终使用三级缓存中获得的引用，保证了循环依赖中注入的引用和bean创建好后的引用一致；</p></li></ul><h2 id="为什么一级缓存不行" tabindex="-1"><a class="header-anchor" href="#为什么一级缓存不行"><span>为什么一级缓存不行</span></a></h2><p>假设只有的第一层Map，存放刚实例化后的Bean，引用不变的情况下，能给解决简单对象的循环依赖问题；</p><p>为什么不使用一级缓存</p><p>Spring Bean的创建过程主要分为三部分：</p><ol><li>创建实例 createBeanInstance</li><li>填充依赖属性 populateBean</li><li>初始化bean initializeBean</li></ol><p>如果只有一级缓存，什么阶段存放，放在初始化后就无法解决循环依赖；放在实例化后无法解决代理对象的循环依赖问题</p><p>所以在Spring框架下，想使用一级缓存解决循环依赖不合理，至少需要二级缓存</p><h2 id="为什么二级缓存不够" tabindex="-1"><a class="header-anchor" href="#为什么二级缓存不够"><span>为什么二级缓存不够</span></a></h2><p>如果二级缓存直接存储ObjectFactory对象，用于提前暴露代理引用，那么如果A对象依赖B和C，而B和C又依赖A的情况下</p><p>B、C中注入的A会是两个对象，因为B注入A时使用的二级缓存ObjectFactory对象创建A，C注入A时也是使用的二级缓存ObjectFactory对象创建A，创建的都是新对象；</p><p>我的理解就是，第三个Map即解决存在AOP情况下的循环依赖问题，又保证第二个Map中存放的始终是半成品Bean，层次分；</p><h2 id="spring无法解决的循环依赖" tabindex="-1"><a class="header-anchor" href="#spring无法解决的循环依赖"><span>spring无法解决的循环依赖</span></a></h2><h3 id="构造器注入的循环依赖无法解决" tabindex="-1"><a class="header-anchor" href="#构造器注入的循环依赖无法解决"><span>构造器注入的循环依赖无法解决</span></a></h3><p>spring处理循环依赖都是在实例化之后，但是构造器的注入是发生在实例化期间，在此期间三个map中都不会存在可获取的Bean，无法应用spring的三层缓存</p><h3 id="使用-async" tabindex="-1"><a class="header-anchor" href="#使用-async"><span>使用@Async</span></a></h3><p>参考：<a href="https://www.yisu.com/jc/724480.html" target="_blank" rel="noopener noreferrer">https://www.yisu.com/jc/724480.html</a></p><p>因为使用@Async的类的代理对象生成和AOP代理对象生成使用的是不同的类的方法，</p><p>一般的AOP动态代理是依靠 <code>AnnotationAwareAspectJAutoProxyCreator</code> 获取的</p><p>而@Async的代理是通过<code>AsyncAnnotationBeanPostProcessor</code> 获取的</p><p>我们知道在spring的第三层缓存中放着ObjectFactory对象，用于获取对象的早期引用，如果对象需要代理就可以通过<code>getEarlyBeanReference</code>方法获取</p><p>但是<code>getEarlyBeanReference</code>方法中，只会通过<code>SmartInstantiationAwareBeanPostProcessor</code>类的实现类的后置处理器来获取代理对象，而<code>AsyncAnnotationBeanPostProcessor</code>并不没有实现<code>SmartInstantiationAwareBeanPostProcessor</code>，因此在此处@Async的类获取到的早期引用是原始对象，当进入到第三阶段初始化时才会通过<code>AsyncAnnotationBeanPostProcessor</code>获取代理对象，</p><p><img src="'+w+'" alt="image-20240612161733108" loading="lazy"></p><p><code>doCreateBean</code>创建bean流程中，初始化后，会比较初始化后的对象与原始对象是否为同一引用</p><p>而普通AOP代理在循环依赖的情况下，初始化阶段时不会获取代理对象的，因为在二级缓存中已经存在代理对象的引用，而使用@Async的代理对象是在初始化阶段得到的，那么<code>exposedObject == bean</code>就为fasle，随后进入检查当前bean是否依赖其他bean，存在依赖其他bean抛异常<code>BeanCurrentlyInCreationException</code></p><p><img src="'+h+'" alt="image-20240612170943036" loading="lazy"></p>',71),j=[S];function A(O,x){return a(),s("div",null,j)}const N=n(B,[["render",A],["__file","循环依赖.html.vue"]]),C=JSON.parse('{"path":"/spring/spring-framework/%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96.html","title":"循环依赖","lang":"zh-CN","frontmatter":{"description":"循环依赖 类A依赖类B，类B也依赖类A，这种情况就会出现循环依赖。 Bean A → Bean B → Bean A 循环依赖会导致内存溢出 当通过 new AService() 创建一个对象时你会获得一个栈溢出的错误 因为调用 new AService() 时会先去执行属性 bService 的初始化, 而 bService 的初始化又会去执行ASe...","head":[["meta",{"property":"og:url","content":"https://glory-study-review.github.io/studynote/studynote/spring/spring-framework/%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96.html"}],["meta",{"property":"og:site_name","content":"Glory学习笔记"}],["meta",{"property":"og:title","content":"循环依赖"}],["meta",{"property":"og:description","content":"循环依赖 类A依赖类B，类B也依赖类A，这种情况就会出现循环依赖。 Bean A → Bean B → Bean A 循环依赖会导致内存溢出 当通过 new AService() 创建一个对象时你会获得一个栈溢出的错误 因为调用 new AService() 时会先去执行属性 bService 的初始化, 而 bService 的初始化又会去执行ASe..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-31T12:50:40.000Z"}],["meta",{"property":"article:author","content":"Glory"}],["meta",{"property":"article:modified_time","content":"2024-07-31T12:50:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"循环依赖\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-07-31T12:50:40.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Glory\\"}]}"]]},"headers":[{"level":2,"title":"解决循环依赖的简单思路","slug":"解决循环依赖的简单思路","link":"#解决循环依赖的简单思路","children":[]},{"level":2,"title":"spring是如何解决循环依赖的","slug":"spring是如何解决循环依赖的","link":"#spring是如何解决循环依赖的","children":[{"level":3,"title":"doGetBean()","slug":"dogetbean","link":"#dogetbean","children":[]},{"level":3,"title":"doCreateBean()","slug":"docreatebean","link":"#docreatebean","children":[]}]},{"level":2,"title":"为什么一级缓存不行","slug":"为什么一级缓存不行","link":"#为什么一级缓存不行","children":[]},{"level":2,"title":"为什么二级缓存不够","slug":"为什么二级缓存不够","link":"#为什么二级缓存不够","children":[]},{"level":2,"title":"spring无法解决的循环依赖","slug":"spring无法解决的循环依赖","link":"#spring无法解决的循环依赖","children":[{"level":3,"title":"构造器注入的循环依赖无法解决","slug":"构造器注入的循环依赖无法解决","link":"#构造器注入的循环依赖无法解决","children":[]},{"level":3,"title":"使用@Async","slug":"使用-async","link":"#使用-async","children":[]}]}],"git":{"createdTime":1715938956000,"updatedTime":1722430240000,"contributors":[{"name":"Glory","email":"214521739@qq.com","commits":4},{"name":"黄灰红","email":"214521739@qq.com","commits":2}]},"readingTime":{"minutes":10.63,"words":3189},"filePathRelative":"spring/spring-framework/循环依赖.md","localizedDate":"2024年5月17日","autoDesc":true,"excerpt":"\\n<p>类A依赖类B，类B也依赖类A，这种情况就会出现循环依赖。 Bean A → Bean B → Bean A</p>\\n<p>循环依赖会导致<code>内存溢出</code></p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">AService</span> <span class=\\"token punctuation\\">{</span>\\n<span class=\\"token keyword\\">private</span> <span class=\\"token class-name\\">BService</span> bService <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">BService</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">BService</span> <span class=\\"token punctuation\\">{</span>\\n<span class=\\"token keyword\\">private</span> <span class=\\"token class-name\\">AService</span> aService <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">AService</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>"}');export{N as comp,C as data};
